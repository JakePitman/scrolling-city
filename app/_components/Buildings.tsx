/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/buildings/all_buildings.glb -o app/_components/Buildings.tsx 
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["1a"]: THREE.Mesh;
    ["1a_1"]: THREE.Mesh;
    ["1a_2"]: THREE.Mesh;
    ["1a_3"]: THREE.Mesh;
    ["2a"]: THREE.Mesh;
    ["2a_1"]: THREE.Mesh;
    ["2a_2"]: THREE.Mesh;
    ["2a_3"]: THREE.Mesh;
    ["3a"]: THREE.Mesh;
    ["3a_1"]: THREE.Mesh;
    ["3a_2"]: THREE.Mesh;
    ["3a_3"]: THREE.Mesh;
    ["1b"]: THREE.Mesh;
    ["1b_1"]: THREE.Mesh;
    ["1b_2"]: THREE.Mesh;
    ["1b_3"]: THREE.Mesh;
    ["2b"]: THREE.Mesh;
    ["2b_1"]: THREE.Mesh;
    ["2b_2"]: THREE.Mesh;
    ["2b_3"]: THREE.Mesh;
    ["3b"]: THREE.Mesh;
    ["3b_1"]: THREE.Mesh;
    ["3b_2"]: THREE.Mesh;
    ["3b_3"]: THREE.Mesh;
    ["1c"]: THREE.Mesh;
    ["1c_1"]: THREE.Mesh;
    ["1c_2"]: THREE.Mesh;
    ["1c_3"]: THREE.Mesh;
    ["2c"]: THREE.Mesh;
    ["2c_1"]: THREE.Mesh;
    ["2c_2"]: THREE.Mesh;
    ["2c_3"]: THREE.Mesh;
    ["3c"]: THREE.Mesh;
    ["3c_1"]: THREE.Mesh;
    ["3c_2"]: THREE.Mesh;
    ["3c_3"]: THREE.Mesh;
  };
  materials: {
    Concrete: THREE.MeshStandardMaterial;
    LitUpGlass: THREE.MeshStandardMaterial;
    NormalGlass: THREE.MeshStandardMaterial;
    Pavement: THREE.MeshStandardMaterial;
  };
};

const concreteMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });
const litGlassMaterial = new THREE.MeshStandardMaterial({
  color: "white",
  emissive: "red",
  emissiveIntensity: 2,
  toneMapped: false,
});
const pavementMaterial = new THREE.MeshStandardMaterial({ color: "#080808" });

type BuildingProps = {};
export const Building1a = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh
        geometry={nodes["1a"].geometry}
        material={concreteMaterial}
        receiveShadow
      />
      <mesh
        geometry={nodes["1a_1"].geometry}
        material={litGlassMaterial}
        castShadow
      />
      <mesh
        geometry={nodes["1a_2"].geometry}
        material={materials.NormalGlass}
      />
      <mesh
        geometry={nodes["1a_3"].geometry}
        material={pavementMaterial}
        receiveShadow
      />
    </group>
  );
};
export const Building1b = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh geometry={nodes["1b"].geometry} material={pavementMaterial} />
      <mesh geometry={nodes["1b_1"].geometry} material={concreteMaterial} />
      <mesh geometry={nodes["1b_2"].geometry} material={litGlassMaterial} />
      <mesh
        geometry={nodes["1b_3"].geometry}
        material={materials.NormalGlass}
      />
    </group>
  );
};
export const Building1c = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh geometry={nodes["1c"].geometry} material={pavementMaterial} />
      <mesh geometry={nodes["1c_1"].geometry} material={concreteMaterial} />
      <mesh geometry={nodes["1c_2"].geometry} material={litGlassMaterial} />
      <mesh
        geometry={nodes["1c_3"].geometry}
        material={materials.NormalGlass}
      />
    </group>
  );
};
export const Building2a = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh geometry={nodes["2a"].geometry} material={pavementMaterial} />
      <mesh geometry={nodes["2a_1"].geometry} material={concreteMaterial} />
      <mesh geometry={nodes["2a_2"].geometry} material={litGlassMaterial} />
      <mesh
        geometry={nodes["2a_3"].geometry}
        material={materials.NormalGlass}
      />
    </group>
  );
};
export const Building2b = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh geometry={nodes["2b"].geometry} material={pavementMaterial} />
      <mesh geometry={nodes["2b_1"].geometry} material={concreteMaterial} />
      <mesh geometry={nodes["2b_2"].geometry} material={litGlassMaterial} />
      <mesh
        geometry={nodes["2b_3"].geometry}
        material={materials.NormalGlass}
      />
    </group>
  );
};
export const Building2c = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh geometry={nodes["2c"].geometry} material={pavementMaterial} />
      <mesh geometry={nodes["2c_1"].geometry} material={concreteMaterial} />
      <mesh geometry={nodes["2c_2"].geometry} material={litGlassMaterial} />
      <mesh
        geometry={nodes["2c_3"].geometry}
        material={materials.NormalGlass}
      />
    </group>
  );
};
export const Building3a = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh geometry={nodes["3a"].geometry} material={concreteMaterial} />
      <mesh geometry={nodes["3a_1"].geometry} material={litGlassMaterial} />
      <mesh
        geometry={nodes["3a_2"].geometry}
        material={materials.NormalGlass}
      />
      <mesh geometry={nodes["3a_3"].geometry} material={pavementMaterial} />
    </group>
  );
};
export const Building3b = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh geometry={nodes["3b"].geometry} material={pavementMaterial} />
      <mesh geometry={nodes["3b_1"].geometry} material={concreteMaterial} />
      <mesh geometry={nodes["3b_2"].geometry} material={litGlassMaterial} />
      <mesh
        geometry={nodes["3b_3"].geometry}
        material={materials.NormalGlass}
      />
    </group>
  );
};
export const Building3c = ({}: BuildingProps) => {
  const { nodes, materials } = useGLTF(
    "models/buildings/all_buildings.glb"
  ) as GLTFResult;

  return (
    <group position={[0, 0, 0]}>
      <mesh geometry={nodes["3c"].geometry} material={pavementMaterial} />
      <mesh geometry={nodes["3c_1"].geometry} material={concreteMaterial} />
      <mesh geometry={nodes["3c_2"].geometry} material={litGlassMaterial} />
      <mesh
        geometry={nodes["3c_3"].geometry}
        material={materials.NormalGlass}
      />
    </group>
  );
};

useGLTF.preload("/all_buildings.glb");
